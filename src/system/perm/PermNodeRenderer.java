/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package system.perm;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.EventObject;
import javax.swing.JTree;
import javax.swing.Renderer;
import javax.swing.event.CellEditorListener;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreeCellRenderer;
import system.Kernel;

/**
 *
 * @author rvanya
 */
  /*
    class MyCellEditorListener implements CellEditorListener
    {
        public MyCellEditorListener() {}
            @Override
            public void editingStopped(ChangeEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
    };
*/
public class PermNodeRenderer extends javax.swing.JPanel
    implements TreeCellRenderer , TreeCellEditor, Renderer 
{

    CellEditorListener myCellEditorListener; 
    JTree tree_menu;
    PermTreeNode myPermTreeNode;
    boolean isEditable = false;
     /**
     * Creates new form PermNodeRenderer
     */
    public PermNodeRenderer(JTree treeMenu) {
        tree_menu = treeMenu;
        initComponents();
       this.addMouseListener(new MouseListener() {

           public void mousePressed(MouseEvent evt) { 
              if (evt.isControlDown()) {
    PermTreeNode selectedNode = 
       (PermTreeNode) tree_menu.getLastSelectedPathComponent(); 
       System.out.println("NODE_LEVEL:" + selectedNode.getLevel() 
               + " UOBJECT:" + selectedNode.toString()
       + " PERMPROG:" + selectedNode.getPermDefinition().getPermProgObject());
       Integer udefId = selectedNode.getPermDefinition().getUserPermDefinitionRowID();
                Kernel.staticMsg("<html><B>Informácie k objektu: </B>"
                 + "<BR><BR>NODE_LEVEL: <B>" + selectedNode.getLevel() + "</B>" 
                 + "<BR><BR> PERM_LABEL: <B>" + selectedNode.getPermDefinition().getPermLabel() + "</B>" 
                 + "<BR><BR> USER_OBJECT <B>:" + selectedNode.toString() + "</B>"
                 + "<BR> PERM_PROG: <B>" + selectedNode.getPermDefinition().getPermProgObject() + "</B>" 
                 + "<BR> PARENT_PERM: <B>" + selectedNode.getPermDefinition().getParentPermDefinition().toString() + "</B>" 
                 + "<BR> PERM_OBJ_TYPE: <B>" + selectedNode.getPermDefinition().getPermObjType() + "</B>" 
                 + "<BR> SUPER_ROWID: <B>" + selectedNode.getPermDefinition().getSuperPermDefinitionRowID() + "</B>" 
                 + "<BR> MAIN_ROWID: <B>" 
                   + ((udefId!=null)?udefId.toString():"null")
                     + "</B>" 
                 + "<BR><BR>IS UPDATED: <B>" + selectedNode.isUpdated() + "</B>" 
                 + "</html>"
                 );
              }
          } 

            @Override
            public void mouseClicked(MouseEvent evt) {
             }
            

            @Override
            public void mouseReleased(MouseEvent e) {
              // this.OutPrintln("----mouseReleaseeeeed" + e.paramString());
            }

            @Override
            public void mouseEntered(MouseEvent e) {
               // this.OutPrintln("----mouseEntereeed" + e.paramString());
            }

            @Override
            public void mouseExited(MouseEvent e) {
              //  this.OutPrintln("----mouseExiteeed" + e.paramString());
            }
        });
        //addCellEditorListener((CellEditorListener) new MyCellEditorListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheck_N = new javax.swing.JCheckBox();
        jCheck_U = new javax.swing.JCheckBox();
        jCheck_D = new javax.swing.JCheckBox();
        jCheck_P = new javax.swing.JCheckBox();
        jTF_whereCondition = new javax.swing.JTextField();
        btnSelectAndEdit = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jCheck_N.setText("N");
        jCheck_N.setToolTipText("Užívateľ môže zadávať nové/ďalšie údaje");
        jCheck_N.setEnabled(false);
        jCheck_N.setOpaque(false);
        jCheck_N.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheck_NActionPerformed(evt);
            }
        });

        jCheck_U.setText("U");
        jCheck_U.setToolTipText("Užívateľ môže opravovať existujúce údaje");
        jCheck_U.setEnabled(false);
        jCheck_U.setOpaque(false);
        jCheck_U.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheck_UActionPerformed(evt);
            }
        });

        jCheck_D.setText("D");
        jCheck_D.setToolTipText("Užívateľ môže mazať existujúce údaje");
        jCheck_D.setEnabled(false);
        jCheck_D.setOpaque(false);
        jCheck_D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheck_DActionPerformed(evt);
            }
        });

        jCheck_P.setText("P");
        jCheck_P.setToolTipText("Užívateľ môže tlačiť/vidieť existujúce údaje");
        jCheck_P.setEnabled(false);
        jCheck_P.setOpaque(false);
        jCheck_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheck_PActionPerformed(evt);
            }
        });

        jTF_whereCondition.setEditable(false);
        jTF_whereCondition.setText("jTextField1");
        jTF_whereCondition.setToolTipText("Obmedzenia viditelnosti údajov - ZATIAL NEIMPLEMENTOVANÉ !");
        jTF_whereCondition.setEnabled(false);
        jTF_whereCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_whereConditionActionPerformed(evt);
            }
        });

        btnSelectAndEdit.setText("jButton1");
        btnSelectAndEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAndEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnSelectAndEdit)
                .addGap(8, 8, 8)
                .addComponent(jCheck_N)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheck_U)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheck_D)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheck_P)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTF_whereCondition, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheck_N)
                    .addComponent(jCheck_U)
                    .addComponent(jCheck_D)
                    .addComponent(jCheck_P)
                    .addComponent(jTF_whereCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectAndEdit)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheck_NActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheck_NActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheck_NActionPerformed

    private void jCheck_UActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheck_UActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheck_UActionPerformed

    private void jCheck_DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheck_DActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheck_DActionPerformed

    private void jCheck_PActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheck_PActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheck_PActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
          System.out.println("evt.getButton()===" + evt.getButton());
          evt.consume();
    }//GEN-LAST:event_formMouseClicked

    private void btnSelectAndEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAndEditActionPerformed
        isEditable = (!isEditable);
        jCheck_N.setEnabled(isEditable);
        jCheck_U.setEnabled(isEditable);
        jCheck_D.setEnabled(isEditable);
        jCheck_P.setEnabled(isEditable);
////        isEditable = true;       
    }//GEN-LAST:event_btnSelectAndEditActionPerformed

    private void jTF_whereConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_whereConditionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_whereConditionActionPerformed

    /*
    public JLabel getTextLabel(String labelText) {
        jLabel1.setText(labelText);
        return jLabel1;
    }
    */
    /*
    public JButton getTextLabel(String labelText) {
        btnSelectAndEdit.setText(labelText);
        return btnSelectAndEdit;
    }
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSelectAndEdit;
    private javax.swing.JCheckBox jCheck_D;
    private javax.swing.JCheckBox jCheck_N;
    private javax.swing.JCheckBox jCheck_P;
    private javax.swing.JCheckBox jCheck_U;
    private javax.swing.JTextField jTF_whereCondition;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object oValue, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
        
        //jLabel1.setText(value.toString());
        ////myPermTreeNode
        //System.out.println("getTreeCellRendererComponentaaaa:" + oValue.getClass().getSimpleName());
        myPermTreeNode = (PermTreeNode) oValue;
        setFontAndColor("RENDERER");
        jCheck_N.setEnabled(false);
        jCheck_U.setEnabled(false);
        jCheck_D.setEnabled(false);
        jCheck_P.setEnabled(false);
        jCheck_N.setSelected(myPermTreeNode.getPermDefinition().isPermNew());
        jCheck_U.setSelected(myPermTreeNode.getPermDefinition().isPermUpdate());
        jCheck_D.setSelected(myPermTreeNode.getPermDefinition().isPermDelete());
        jCheck_P.setSelected(myPermTreeNode.getPermDefinition().isPermPrint());
        /* NEFUNGUJE 
        if (myPermTreeNode.isRecursive()) 
            this.setBackground(new java.awt.Color(204, 204, 204));
        else    
            this.setBackground(new java.awt.Color(175, 90, 175));
        */
///        jLabel1.setForeground(Color.blue);
        //jTF_whereCondition.setVisible(false);
//        if (selected)
  //          jTF_whereCondition.setText(FnEaS.currDateTime());
        this.revalidate();
        this.repaint();
        this.setBackground(new java.awt.Color(204, 204, 204));
        return this;

        /////throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void setFontAndColor(String objType) {
        btnSelectAndEdit.setText(myPermTreeNode.getPermLabel());
        String btnText = btnSelectAndEdit.getText();
        /*
        int iPlus;
        iPlus = (objType.equalsIgnoreCase("RENDERER")?0:0);
        if (myPermTreeNode!=null) {
        btnSelectAndEdit.setText(myPermTreeNode.getPermLabel());
        jTF_whereCondition.setText(myPermTreeNode.getPermDefinition().getPermProgObject());
        }
        //if (jLabel1.getText().startsWith("Príst"))
        // Uprava velkosti fontu podla obsahu labela danej volby
        if (btnText.startsWith("Príst") && btnText.contains("EaSys")) 
            btnSelectAndEdit.setFont(btnSelectAndEdit.getFont().deriveFont(Font.BOLD, 14 + iPlus));
        else if (btnText.startsWith("Modul"))
            btnSelectAndEdit.setFont(btnSelectAndEdit.getFont().deriveFont(Font.BOLD, 13 + iPlus));
        else if (btnText.startsWith("Menu"))
            btnSelectAndEdit.setFont(btnSelectAndEdit.getFont().deriveFont(Font.BOLD, 12 + iPlus));
        else
            btnSelectAndEdit.setFont(btnSelectAndEdit.getFont().deriveFont(Font.BOLD, 11 + iPlus));

            
        // ziskanie metrics-objektu z popisu
        FontMetrics metrics = btnSelectAndEdit.getFontMetrics(btnSelectAndEdit.getFont());
        // hlbka riadku podla aktualneho fontu
        int hgt = metrics.getHeight();
        // dlzka riadku podla aktualneho fontu
        int adv = metrics.stringWidth(btnSelectAndEdit.getText());
        // kalkulovanie rozmerov obrazovkoveho objektu s 2pxl okrajom
        Dimension size = new Dimension(adv+2, hgt+2);
        // nastavenie noveho rozmeru objektu 
        btnSelectAndEdit.setPreferredSize(size);
        btnSelectAndEdit.setSize(size);
        */
        // nastavenie farby pisma podla obsahu textu
        if (btnText.startsWith("Príst") && btnText.contains("SYSTÉM")) 
            btnSelectAndEdit.setForeground(Color.BLACK/*Color.RGBtoHSB(120, 120, 120, (float[]) {10,10,10}))*/);
        else if (btnText.startsWith("MODUL"))
            btnSelectAndEdit.setForeground(Color.BLACK);
        else if (btnText.startsWith("MENU"))
           btnSelectAndEdit.setForeground(Color.BLUE);
        else
           btnSelectAndEdit.setForeground(Color.DARK_GRAY);
    }
    /*
    public void setPermProgObject(String s) {
        jTF_whereCondition.setText("SPO" + s);
        btnSelectAndEdit.setText(s);
    }
*/
    @Override
    public Component getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row) {
        //setValue(value.toString(), isSelected);
        myPermTreeNode = (PermTreeNode) value;
        setFontAndColor("EDITOR");
        System.out.println(">>>>>>>####>>>>> LOAD DATA -> getTreeCellEditorComponentt for:" + myPermTreeNode.getPermLabel());

          if (myPermTreeNode!=null) {
        btnSelectAndEdit.setText(myPermTreeNode.getPermDefinition().getPermLabel());
        //jTF_whereCondition.setText(myPermTreeNode.getPermDefinition().getPermProgObject());
        jCheck_N.setSelected(myPermTreeNode.getPermDefinition().isPermNew());
        jCheck_U.setSelected(myPermTreeNode.getPermDefinition().isPermUpdate());
        jCheck_D.setSelected(myPermTreeNode.getPermDefinition().isPermDelete());
        jCheck_P.setSelected(myPermTreeNode.getPermDefinition().isPermPrint());
        this.setBackground(new java.awt.Color(155, 70, 155));
        this.invalidate();
        this.revalidate();
        this.repaint();
         // Kernel.Msg("Stopp-on " + myPermTreeNode.getPermLabel());
        }
        return this;
    }

    @Override
    public Object getCellEditorValue() {
        return myPermTreeNode /* btnSelectAndEdit.getText() */;
    }

    @Override
    public boolean isCellEditable(EventObject anEvent) {
       return true;
    }

    @Override
    public boolean shouldSelectCell(EventObject anEvent) {
        return true;
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean stopCellEditing() {
        System.out.println(">>>>##>>>>> SAVING DATA -> Stopping celledit_on PermLabel:" 
        + myPermTreeNode.getPermDefinition().getPermLabel()
        + " PermProg:" + myPermTreeNode.getPermDefinition().getPermProgObject());
        myPermTreeNode.getPermDefinition().setPermNew(jCheck_N.isSelected());
        myPermTreeNode.getPermDefinition().setPermUpdate(jCheck_U.isSelected());
        myPermTreeNode.getPermDefinition().setPermDelete(jCheck_D.isSelected());
        myPermTreeNode.getPermDefinition().setPermPrint(jCheck_P.isSelected());
        myPermTreeNode.setPermDefinition(myPermTreeNode.getPermDefinition()); // toto tu je divocinaa !!
        //tu zistit ci bol node editovany a vyvolat commit !
        myPermTreeNode.setUserObject(myPermTreeNode.getPermDefinition());
        // sluzil ako test:: myPermTreeNode.printNodeLabels();
        myPermTreeNode.commit();
        myPermTreeNode.propagateNodeOnSubTree();
        ////printNode(myPermTreeNode);
        return true;
    }
    @Override
    public void cancelCellEditing() {
        revalidate();
        repaint();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
  }

    @Override
    public void addCellEditorListener(CellEditorListener l) {
         myCellEditorListener = l;
        System.out.println("TREE_ADING_CELLEDITORLISTENNER");
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeCellEditorListener(CellEditorListener l) {
        System.out.println("TREE_REMOVING_CELLEDITORLISTENNER");
        myCellEditorListener = null;
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValue(Object aValue, boolean isSelected) {
        System.out.println("");
        PermDefinition pdfn = (PermDefinition) aValue;
        if (isSelected) 
        btnSelectAndEdit.setText("SSetVAlua:" + pdfn.getPermLabel());
        else
        btnSelectAndEdit.setText("NSetVAlue:" + pdfn.getPermLabel());
        jCheck_N.setSelected(pdfn.isPermNew());
        jCheck_U.setSelected(pdfn.isPermUpdate());
        jCheck_D.setSelected(pdfn.isPermDelete());
        jCheck_P.setSelected(pdfn.isPermPrint());

        ////throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Component getComponent() {
        return btnSelectAndEdit;
        ////throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void setPermTreeNode(PermTreeNode ptn) {
        myPermTreeNode = ptn;
        btnSelectAndEdit.setText(ptn.getPermLabel());
        //jTF_whereCondition.setText(ptn.getPermDefinition().getPermProgObject());
        PermDefinition pdfn = myPermTreeNode.getPermDefinition();
        jCheck_N.setSelected(pdfn.isPermNew());
        jCheck_U.setSelected(pdfn.isPermUpdate());
        jCheck_D.setSelected(pdfn.isPermDelete());
        jCheck_P.setSelected(pdfn.isPermPrint());
       
    }
    
    
}
