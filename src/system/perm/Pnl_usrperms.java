/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package system.perm;

import eoc.database.DBconnection;
import java.sql.Connection;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import system.FnEaS;
import system.Kernel;
import system.perm.Permd;

/**
 *
 * @author rvanya
 */
public class Pnl_usrperms extends eoc.widgets.PObject {

    private boolean bPermUpdating = false;
    DefaultTreeModel myTreeModel;
    DefaultMutableTreeNode rootNode;
    private boolean bRecursive = false;
    private Permd permd;
    private boolean bUpdating = false;

    /**
     * Creates new form Pnl_usrperms
     */
    public Pnl_usrperms() {
        initComponents();
        jTb_names.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jTb_names.getModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                System.out.println("tableeeventt::" + e.getType() + " tbupdete:" + TableModelEvent.UPDATE);
                if (e.getType() == e.UPDATE) {
                    System.out.println(e.getColumn());
                    System.out.println(e.getFirstRow());
                    System.out.println(e.getLastRow());
                }
            }
        });

        jTb_names.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (bUpdating) {
                    bUpdating = false;
                    return;
                }
                int curRow = jTb_names.getSelectedRow();
                String curUsr = jTb_names.getValueAt(curRow, 0).toString();
                setCurrentUser(lbl_group.getText(), curUsr);
            }
        });

    }

    public void setCurrentUser(String sUsrType, String sUsrName) {
        lbl_group.setText(sUsrType);
        lbl_user.setText(sUsrName);
        String  utype = (sUsrType.startsWith("Skup")?"GROUP":"USER");
        loadPermCache(utype, sUsrName);
    }

    @Override
    public String initialize(Kernel kr, DBconnection cX) {
        super.initialize(kr, cX); //To change body of generated methods, choose Tools | Templates.
//        myTreeModel = tree_menu.getModel();
//2015-12-08        rootNode = new DefaultMutableTreeNode("Prístupové práva systému EaSys");    
        permd = krn.getPermd();
        PermDefinition pDefRoot;

        pDefRoot = permd.getSuperPermRoot();
        /*
         new PermDefinition("SUPER",krn.getWrapperAppName(),krn,permd,MyCn
         ,"PROGRAM","Prístupové práva pre SYSTEM:" + krn.getWrapperAppName()
         ,permd .getPermRoot_ID(), "SYSTEM_" + krn.getWrapperAppName()
         ,"");
         */

        // pDefMo.setPermProgObject("SYSTEM");
        rootNode = new PermTreeNode(this, tree_menu, pDefRoot);
        myTreeModel = new DefaultTreeModel(rootNode);
        System.out.println("krn.getPermd() == " + krn.getPermd());
        krn.getPermd().buildMenuPermTreeModel(this, tree_menu, myTreeModel, rootNode);
        tree_menu.setModel(myTreeModel);

        //rootNode.setCellEditor(new PermNodeEditor(tree_menu));
        //tree_menu.setCellRenderer(new PermNodeRenderer(tree_menu));
        tree_menu.setCellRenderer(new PermNodeRenderer(tree_menu));
        tree_menu.setCellEditor((new PermNodeRenderer(tree_menu)));
        tree_menu.setEditable(true);
        tree_menu.setInvokesStopCellEditing(true);
        jCB_AccountType.getActionListeners()[0].actionPerformed(null);
        //myTreeModel = new TreeModel();
        return "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        lbl_group = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl_user = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree_menu = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jCB_AccountType = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTb_names = new javax.swing.JTable();
        jCB_rekurzivne = new javax.swing.JCheckBox();

        jLabel1.setText("jLabel1");

        jButton1.setText("Perm-cache-test");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lbl_group.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_group.setText("lbl_group");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Nastavenia pre užívateľa:");

        lbl_user.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_user.setText("lbl_user");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_group, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_user, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lbl_user, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lbl_group, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tree_menu.setEditable(true);
        tree_menu.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tree_menuValueChanged(evt);
            }
        });
        tree_menu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tree_menuPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tree_menu);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCB_AccountType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Skupina", "Užívateľ" }));
        jCB_AccountType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_AccountTypeActionPerformed(evt);
            }
        });

        jTb_names.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Meno", "Popis"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTb_names.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTb_names);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCB_AccountType, 0, 286, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCB_AccountType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );

        jCB_rekurzivne.setText("Rekurzíve zapisovanie na podriadene uzly");
        jCB_rekurzivne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_rekurzivneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jCB_rekurzivne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCB_rekurzivne)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCB_AccountTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_AccountTypeActionPerformed
        ////System.out.println(jCB_AccountType.getSelectedItem());
        lbl_group.setText(jCB_AccountType.getSelectedItem().toString());
        String sqlStm = "";
        Object[][] rsArray;
        bUpdating = true;
        ((DefaultTableModel) jTb_names.getModel()).setRowCount(0);
        if (jCB_AccountType.getSelectedItem().equals("Skupina")) {
            sqlStm = "Select * from eas_usrgrp order by c_group";
            rsArray = krn.SQLQ_getQueryResultSetAsArray(MyCn.getConn(), sqlStm, false);
        } else {
            sqlStm = "Select * from eas_users order by c_user";
            rsArray = krn.SQLQ_getQueryResultSetAsArray(MyCn.getConn(), sqlStm, false);
        }
        Object[] myRow = new Object[2];
        for (Object[] oRw : rsArray) {
            myRow[0] = oRw[1];
            myRow[1] = oRw[2];
            bUpdating = true;
            ((DefaultTableModel) jTb_names.getModel()).addRow(myRow);
        }
        jTb_names.setRowSelectionInterval(0, 0);

    }//GEN-LAST:event_jCB_AccountTypeActionPerformed

    private void tree_menuValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tree_menuValueChanged
        JTree jt = (JTree) evt.getSource();
        TreePath tp;
        tp = jt.getSelectionPath();
        Class cl = tp.getLastPathComponent().getClass();
        if (tp.getLastPathComponent() instanceof PermTreeNode) {
            PermTreeNode ptn = (PermTreeNode) tp.getLastPathComponent();
            System.out.println("\nPnl_usrperms.tree_menuValueChanged():" //+ evt.getSource().getClass()
                    + "\n PATTH:" + tp
                    + "\n getLastPathComponent().getClass():" + tp.getLastPathComponent().getClass()
                    + "\nPERM_OBJEKT_JE: " + ptn.getPermDefinition().getPermLabel()
                    + "\nPERM_PROGRAM_OBJEKT_JE: " + ptn.getPermDefinition().getPermProgObject()
                    + "\nUSER_OBJEKT_JE: " + ptn.getUserObject().toString()
            );
            // PermNodeRenderer pnr = (PermNodeRenderer) tree_menu.getCellRenderer();
            PermNodeRenderer pnr = (PermNodeRenderer) tree_menu.getCellEditor();
            /////pnr.setPermProgObject(ptn.getPermProgObject());
            pnr.setPermTreeNode(ptn);
       //ptn.setPermDefinition(null);
        /*
             (PermNodeEditor) jt.getCellEditor().
             ptn.
             */
            ////tu donutit editor objekt t nacitaniu platnych hodonot
        }
    }//GEN-LAST:event_tree_menuValueChanged

    private void tree_menuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tree_menuPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tree_menuPropertyChange

    public void setRecursive(boolean b) {
        bRecursive = b;
    }

    public boolean getRecursive() {
        return bRecursive;
    }

    private void jCB_rekurzivneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_rekurzivneActionPerformed
        setRecursive(jCB_rekurzivne.isSelected());
    }//GEN-LAST:event_jCB_rekurzivneActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        testPermCache("permd");
    }//GEN-LAST:event_jButton1ActionPerformed

    public int getNumberOfNodes(TreeModel model) {
        return getNumberOfNodes(model, model.getRoot());
    }

    private int getNumberOfNodes(TreeModel model, Object node) {
        int count = 1;
        int nChildren = model.getChildCount(node);
        for (int i = 0; i < nChildren; i++) {
            count += getNumberOfNodes(model, model.getChild(node, i));
        }
        return count;
    }

    private int testPermCache(String usr) {
        // oznacenie uzlov za netestovane
        int invalidNodes = invalidateNodes();
        // zistenie poctu vsetkych prvkov/uzlov stromu
        int allNodeCount = getNumberOfNodes(tree_menu.getModel());

        //user==uname!! v tabulke eas_permobj
        // zistenie hlaveho/vrchneho/root-uzla
        PermTreeNode rootNode = (PermTreeNode) tree_menu.getModel().getRoot();
        int testedNodes = 1;
        testPermNode(usr, null, rootNode, allNodeCount);

        System.out.println("testPermCache() BEGIN AT:::" + allNodeCount + "/" + invalidNodes);
        // otestovanie root uzla
        // testPermNode(node,allNodeCount, nodeCount);
        testedNodes += testPermCache(usr, rootNode, allNodeCount);

        System.out.println("testPermCache()::: ENDING AT:::" + allNodeCount + "/" + invalidNodes + "/" + testedNodes);
        return testedNodes;

    }

    private int testPermCache(String usr, PermTreeNode permNode, int allNodeCount) {
        /*
         public void dskSetCinn(String sMsg,int akt,int max) {
         dsk.dskSetCinn(sMsg,akt,max);
         }
         */
        // test aktualneho hlaveho/partent-uzla
        //testPermNode(permNode,allNodeCount);
        //System.out.println("----" + permNode.getPermProgObject());
        ////System.out.println(allNodeCount + "/" + nodeCount + "  TESTING NODE: Label:" 
        ////        + node.getPermDefinition().getPermLabel()
        ////        + "  PermProgObject:" + node.getPermDefinition().getPermProgObject());
        // test podriadenych-uzlov
        int tstNodes = 0;
        int childCount = permNode.getChildCount();
        tstNodes += childCount;
//        int levels = permNode.getLevel();

        for (int i = 0; i < childCount; i++) {
            PermTreeNode childNode = (PermTreeNode) permNode.getChildAt(i);
            // test aktualneho uzla
            testPermNode(usr, permNode, childNode, allNodeCount);
            // rekurzivne volanie testu pre podriadene uzly
            if (childNode.getChildCount() > 0) {
                tstNodes += testPermCache(usr, childNode, allNodeCount);
            }
        }
        return tstNodes;
    }

    public void testPermNode(String usr, PermTreeNode parentNode, PermTreeNode node, int allNodes) {
        System.out.println("TN:: --  TESTING NODE: Label:"
                + node.getPermDefinition().getPermLabel()
                + "  PermProgObject:" + node.getPermDefinition().getPermProgObject()
                + "  Parent node::::" + ((parentNode != null) ? parentNode.getPermDefinition().getPermProgObject() : "<NULL>"));

    }

    public int invalidateNodes() {
        int invNodes = 1;
        PermTreeNode rootNode = (PermTreeNode) tree_menu.getModel().getRoot();
        rootNode.setValidated(false);
        invNodes += invalidateNodes(rootNode);
        return invNodes;
    }

    public int invalidateNodes(PermTreeNode node) {
        node.setValidated(false);
        int invNodes = 0;
        int childCount = node.getChildCount();
        invNodes += childCount;
        for (int i = 0; i < childCount; i++) {
            PermTreeNode childNode = (PermTreeNode) node.getChildAt(i);
            childNode.setValidated(false);
            if (childNode.getChildCount() > 0) {
                invNodes += invalidateNodes(childNode);
            }
        }
        return invNodes;
    }

    // load perpission cache for user or group 
    private int loadPermCache(String usrType, String usrName) {
        // oznacenie uzlov za netestovane
        int invalidNodes = invalidateNodes();
        // zistenie poctu vsetkych prvkov/uzlov stromu
        int allLoadedNodeCount = getNumberOfNodes(tree_menu.getModel());

        //user==uname!! v tabulke eas_permobj
        // zistenie hlaveho/vrchneho/root-uzla
        PermTreeNode rootNode = (PermTreeNode) tree_menu.getModel().getRoot();
        int loadedNodes = 1;
        loadPermNode(usrType, usrName, null, rootNode, allLoadedNodeCount);

        System.out.println("loadPermCache() BEGIN AT:::" + allLoadedNodeCount + "/" + invalidNodes);
        // otestovanie root uzla
        // testPermNode(node,allNodeCount, nodeCount);
        loadedNodes += loadPermCache(usrType, usrName, rootNode, allLoadedNodeCount);

        System.out.println("testPermCache()::: ENDING AT:::" + allLoadedNodeCount + "/" + invalidNodes + "/" + loadedNodes);
        tree_menu.repaint();
        return loadedNodes;

    }

    private int loadPermCache(String usrType, String usrName, PermTreeNode permNode, int allNodeCount) {
        /*
         public void dskSetCinn(String sMsg,int akt,int max) {
         dsk.dskSetCinn(sMsg,akt,max);
         }
         */
        // test aktualneho hlaveho/partent-uzla
        //testPermNode(permNode,allNodeCount);
        //System.out.println("----" + permNode.getPermProgObject());
        ////System.out.println(allNodeCount + "/" + nodeCount + "  TESTING NODE: Label:" 
        ////        + node.getPermDefinition().getPermLabel()
        ////        + "  PermProgObject:" + node.getPermDefinition().getPermProgObject());
        // test podriadenych-uzlov
        int tstNodes = 0;
        int childCount = permNode.getChildCount();
        tstNodes += childCount;
//        int levels = permNode.getLevel();

        for (int i = 0; i < childCount; i++) {
            PermTreeNode childNode = (PermTreeNode) permNode.getChildAt(i);
            // test aktualneho uzla
            loadPermNode(usrType, usrName, permNode, childNode, allNodeCount);
            // rekurzivne volanie testu pre podriadene uzly
            if (childNode.getChildCount() > 0) {
                tstNodes += loadPermCache(usrType, usrName, childNode, allNodeCount);
            }
        }
        return tstNodes;
    }

    public void loadPermNode(String usrType, String usrName, PermTreeNode parentNode, PermTreeNode node, int allNodes) {
        node.getPermDefinition().initForUser(usrType, usrName);
        /*
        System.out.println("LN:: --  LOADING NODE: Label:"
                + node.getPermDefinition().getPermLabel()
                + "  PermProgObject:" + node.getPermDefinition().getPermProgObject()
                + "  Parent node::::" + ((parentNode != null) ? parentNode.getPermDefinition().getPermProgObject() : "<NULL>")
                + "\n     ---PermDefinition:" 
                  + node.getPermDefinition().getPermObjType() + "/" 
                  + node.getPermDefinition().getPermUserType() + "/" 
                  + node.getPermDefinition().getPermUserName());
                */
        node.initForUser(usrType, usrName);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCB_AccountType;
    private javax.swing.JCheckBox jCB_rekurzivne;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTb_names;
    private javax.swing.JLabel lbl_group;
    private javax.swing.JLabel lbl_user;
    private javax.swing.JTree tree_menu;
    // End of variables declaration//GEN-END:variables
}
