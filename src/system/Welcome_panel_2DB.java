/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package system;

import eoc.IEOC_DB_driver;
import eoc.database.DBconnection;
import eoc.dbdrv.DbDrv_Firebird;
import eoc.dbdrv.DbDrv_MySQL;
import eoc.dbdrv.DbDrv_Postgres;
import eoc.dbdrv.DbDrv_Sybase;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JDialog;

/**
 *
 * @author rvanya
 */
public class Welcome_panel_2DB extends eoc.widgets.PObject {
    boolean committedOK = false;
    eoc.IEOC_VisualObject parentContainer; 
    private boolean bMode = false; // simple(true)/advanced(false)
    /**
     * Creates new form EaS_welcome_pnl
     */
    public Welcome_panel_2DB() {
        initComponents();
        eOC_DBconnectWork.setConnType("Pracovná databáza","WORK");
        eOC_DBconnectOLAP.setConnType("Dochádyka - databáza","OLAP");
    }
    @Override
    public String initialize(Kernel kr, DBconnection cX) {
        super.initialize(kr, cX); //To change body of generated methods, choose Tools | Templates.
        File f = new File("sys/easys/FirmBanner.png");
        if (!(f==null)) {
            /* 2015-5-13
          Icon imgFirmBanner = new javax.swing.ImageIcon(
                getClass().getResource("sys//easys//FirmBanner.png"));
            */
          Icon imgFirmBanner = new javax.swing.ImageIcon("sys/easys/FirmBanner.png");
            lblBanner.setIcon(imgFirmBanner);
        } 
        String savedFrame;
        savedFrame = krn.getStanicaUserAttribute("Connection_frame_WORK");
        krn.OutPrintln("PrevSavedWelcomeFrame==" + savedFrame);
        eOC_DBconnectWork.setDBselection("Sybase");
        eOC_DBconnectOLAP.setDBselection("Firebird");
        eOC_DBconnectWork.setParentContainer(parentContainer);
        eOC_DBconnectOLAP.setParentContainer(parentContainer);
        
        initFirmBanner();
        return "";
    }
/*
*/
    public String initFirmBanner() {
        File f = new File("sys/easys/FirmBanner.png");
        if (!(f==null)) {
          Icon imgFirmBanner = 
               new javax.swing.ImageIcon("sys/easys/FirmBanner.png");
           lblBanner.setIcon(imgFirmBanner);
        } 
        return "";
    }

    
    public String setKrn(Kernel krnl) {
        krn = krnl;
        lblAppName.setText(krn.getAppName());
        lblAppVersion.setText(krn.getAppVersion());
        lblAppDescription.setText(krn.getAppDescription());
        eOC_DBconnectOLAP.setKrn(krn);
        eOC_DBconnectWork.setKrn(krn);
        return "";
        
    }
        
    public DBconnection[] getDedicatedDBConnections() {
        ////krn.OutPrintln("pnl-requirong start");
        DBconnection[] cnx = {null,null,null};
        cnx[0] = eOC_DBconnectWork.getDBconnection(true);
        cnx[1] = eOC_DBconnectOLAP.getDBconnection(true);
        return cnx;
    }

   public IEOC_DB_driver[] getDedicatedDBdrivers(boolean bAutoconnect) {
        ////krn.OutPrintln("pnl-requirong start");
        IEOC_DB_driver[] cnx = {null,null,null};
        cnx[0] = getDbDriver(eOC_DBconnectWork.getDBconnection(bAutoconnect));
        cnx[1] = getDbDriver(eOC_DBconnectOLAP.getDBconnection(bAutoconnect));
        return cnx;
    }
   
    public IEOC_DB_driver getDbDriver(DBconnection dbc) {
        IEOC_DB_driver drv = null;
        if (dbc.getDBType().toUpperCase().equals("SYBASE"))
                drv = new DbDrv_Sybase();
        else if (dbc.getDBType().toUpperCase().equals("FIREBIRD"))
                drv = new DbDrv_Firebird();
        else if (dbc.getDBType().toUpperCase().equals("MySQL"))
                drv = new DbDrv_MySQL();
        else if (dbc.getDBType().toUpperCase().equals("POSTGRES"))
                drv = new DbDrv_Postgres();
        return drv;
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING:
     * Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBanner = new javax.swing.JLabel();
        eOC_DBconnectOLAP = new eoc.database.Pnl_DBconnect();
        eOC_DBconnectWork = new eoc.database.Pnl_DBconnect();
        lblAppVersion = new javax.swing.JLabel();
        lblAppDescription = new javax.swing.JLabel();
        lblAppName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setAutoscrolls(true);

        lblBanner.setFont(new java.awt.Font("Lucida Console", 1, 14)); // NOI18N
        lblBanner.setForeground(new java.awt.Color(153, 0, 153));
        lblBanner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBanner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/Logo_V1_aa.png"))); // NOI18N

        eOC_DBconnectOLAP.setName("externalDBconnect"); // NOI18N

        eOC_DBconnectWork.setName("internalDBconnect"); // NOI18N

        lblAppVersion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAppVersion.setText("<verzia>");
        lblAppVersion.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        lblAppDescription.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblAppDescription.setText("<popis verzie>");

        lblAppName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/EaSysV2.png"))); // NOI18N
        lblAppName.setText("jLabel2");

        btnSave.setText("Pokračuj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCopy.setText("Kopírovať");
        btnCopy.setToolTipText("Kopíruje definície externej databázy do definícií internej databázy");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Rozšírený vzhlad");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCopy)
                    .addComponent(jCheckBox1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAppName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblAppVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblAppDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblBanner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eOC_DBconnectOLAP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                            .addComponent(eOC_DBconnectWork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAppName, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAppVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAppDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblBanner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eOC_DBconnectWork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eOC_DBconnectOLAP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        //krn.OutPrintln("def=" + eOC_DBconnect1.saveFrameToDef());
        Map<String, String> mpf = eOC_DBconnectWork.saveFrameToDef();
 ////       krn.OutPrintln("MPFFFF:" + mpf);
        eOC_DBconnectOLAP.restoreFrameFromDef(eOC_DBconnectOLAP, mpf);
////        eOC_DBconnectOLAP.restorFrameFromDef(eOC_DBconnectOLAP, mpf);
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DBconnection[] cnx;
        System.out.println("AAA1AAA");
        cnx = getDedicatedDBConnections();
        System.out.println("AAA2AAA");
        if (cnx[0].getConn()==null) {
            Kernel.staticMsg("Pracovnú databázu sa nepodarilo pripojiť.");
           // Kernel.Msg(this.getParent().gtt());
        }
        try {
        System.out.println("AAA3AAA");
            krn.setDbConnections(cnx[0], cnx[1], cnx[2]);
        System.out.println("AAA4AAA");
        } catch (IOException ex) {
            Logger.getLogger(Welcome_panel_2DB.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Welcome_panel_2DB.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("AAA5AAA");

        committedOK = true;
    }//GEN-LAST:event_btnSaveActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        bMode = !bMode;
      this.setMode(bMode);
       JDialog jd; 
       jd = (JDialog) parentContainer;
       jd.revalidate();
       //jd.pack();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    public void setMode(boolean mode) {
       bMode = mode; // simple/advanced
       eOC_DBconnectOLAP.setVisible(!bMode);

    }
    
    public Map<String, String>[] getFrameValues() {
        @SuppressWarnings("unchecked")
        Map<String,String>[] fvl = new Map[3];
        fvl[0] = eOC_DBconnectWork.saveFrameToDef();
        fvl[1] = eOC_DBconnectOLAP.saveFrameToDef();
        return fvl;
    }
    
    @Override
    public void setParentContainer(eoc.IEOC_VisualObject cntnr) {
       parentContainer = cntnr;  
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnSave;
    private eoc.database.Pnl_DBconnect eOC_DBconnectOLAP;
    private eoc.database.Pnl_DBconnect eOC_DBconnectWork;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAppDescription;
    private javax.swing.JLabel lblAppName;
    private javax.swing.JLabel lblAppVersion;
    private javax.swing.JLabel lblBanner;
    // End of variables declaration//GEN-END:variables
}
