/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eoc.widgets;

import eoc.EOC_message;
import java.lang.reflect.Field;
import system.Kernel;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import system.FnEaS;

/**
 *
 * @author rvanya
 */
public class Pnl_TXN extends eoc.widgets.PObject /*  implements eoc.IEOC_VisualObject */ {
    //private String baseState = "";
    Boolean btnStates[]   = {true,true,true,true,false,false} ;
    Boolean bRowAvailable = false;
    Boolean bTxnActive    = false;
     /**
     * Creates new form EOC_Pnl_TXN
     */
    public Pnl_TXN() {
        setMyObjectID(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar_update = new javax.swing.JToolBar();
        btn_new = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_copy = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_commit = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();

        toolbar_update.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        toolbar_update.setFloatable(false);
        toolbar_update.setRollover(true);

        btn_new.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/new.png"))); // NOI18N
        btn_new.setToolTipText("Nový záznam");
        btn_new.setFocusable(false);
        btn_new.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_new.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });
        toolbar_update.add(btn_new);

        btn_edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/update.png"))); // NOI18N
        btn_edit.setToolTipText("Úprava aktuálného záznamu");
        btn_edit.setFocusable(false);
        btn_edit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_edit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });
        toolbar_update.add(btn_edit);

        btn_copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/copy.png"))); // NOI18N
        btn_copy.setToolTipText("Kópia aktuálneho záznamu");
        btn_copy.setFocusable(false);
        btn_copy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_copy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_copyActionPerformed(evt);
            }
        });
        toolbar_update.add(btn_copy);

        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/delete.png"))); // NOI18N
        btn_delete.setToolTipText("Vymazanie aktuálneho záznamu");
        btn_delete.setFocusable(false);
        btn_delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_delete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        toolbar_update.add(btn_delete);

        btn_commit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/save.png"))); // NOI18N
        btn_commit.setToolTipText("Zápis aktuálneho záznamu");
        btn_commit.setEnabled(false);
        btn_commit.setFocusable(false);
        btn_commit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_commit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_commit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_commitActionPerformed(evt);
            }
        });
        toolbar_update.add(btn_commit);

        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/easys/res/img/cancel.png"))); // NOI18N
        btn_cancel.setToolTipText("Všetko dať do pôvodného stavu");
        btn_cancel.setEnabled(false);
        btn_cancel.setFocusable(false);
        btn_cancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_cancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });
        toolbar_update.add(btn_cancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar_update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar_update, javax.swing.GroupLayout.PREFERRED_SIZE, 42, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public String permissionChanged(EOC_message eocMsg) {

        Field[]x=this.getClass().getDeclaredFields();
System.out.println("PNL_TXN:x[1].getName()?permissionChanged----"  + x[1].getName());
// System.out.println("PNL_TXN:x[1].getName()"  + x[1].getName());
//         krn.OutPrintln("Pnl_TXN - " + FnEaS.sObjName(myObjectID)+ " - Changing permission to: " + perms);
         btn_new.setEnabled(super.getPerms().contains("N"));
         btn_copy.setEnabled(super.getPerms().contains("C"));
         btn_edit.setEnabled(super.getPerms().contains("U"));
         btn_delete.setEnabled(super.getPerms().contains("D"));
         return "";
    }  
    
    public String noRowAvailable(EOC_message eocMsg) {
         btn_copy.setEnabled(false);
         btn_edit.setEnabled(false);
         btn_delete.setEnabled(false);
         bRowAvailable = false;
         /*
         implementovat bRowAvailable + dorobit distribuciu perms na txn_panel 
         + vytvorit funkciu na upravu button-enabling podla stavov/kombinacii perms a bRowAvailable
         + suvisi totiz s obidvoma stavmi !!!
         vasarnap! :-)
         */
////         if (FnEaS.sObjName(myObjectID).contains("ulohy"))
////             Kernel.staticMsg("IN NOROWAVAILTXNPNL: " + FnEaS.sObjName(myObjectID));
         return "";
    }
    
    public String rowAvailable(EOC_message eocMsg) {
         btn_new.setEnabled(super.getPerms().contains("N"));
         btn_copy.setEnabled(super.getPerms().contains("C"));
         btn_edit.setEnabled(super.getPerms().contains("U"));
         btn_delete.setEnabled(super.getPerms().contains("D"));
         btn_commit.setEnabled(false);
         btn_cancel.setEnabled(false);
         bRowAvailable = true;
////         if (FnEaS.sObjName(myObjectID).contains("ulohy"))
////             Kernel.staticMsg("IN ROW___AVAILTXNPNL: " + FnEaS.sObjName(myObjectID));
         return "";
    }
    

    private void btn_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_copyActionPerformed
           EOC_message msg = new EOC_message(this,"copyrow", "", "");
           String krn_sendMessage = krn.krn_sendMessage(this,msg,"update", "target");
//        String krn_sendMessage = krn.krn_sendMessage
//         ((Object) this, "copyrow", "", "update", "target" , "");
        if (krn_sendMessage.equals("")) {
            btn_new.setEnabled(false);
            btn_copy.setEnabled(false);
            btn_edit.setEnabled(false);
            btn_delete.setEnabled(false);
            btn_commit.setEnabled(true);
            btn_cancel.setEnabled(true);
        }
        else {
            krn.Message("krn_sendMessage RETURNED: " + krn_sendMessage);
            
        }
    }//GEN-LAST:event_btn_copyActionPerformed

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
           EOC_message msg = new EOC_message(this,"addrow", "", "");
           String krn_sendMessage = krn.krn_sendMessage(this,msg,"update", "target");
//        String krn_sendMessage = krn.krn_sendMessage
//         ((Object) this, "addrow", "", "update", "target" , "");
        if (krn_sendMessage.equals("")) {
            btn_new.setEnabled(false);
            btn_copy.setEnabled(false);
            btn_edit.setEnabled(false);
            btn_delete.setEnabled(false);
            btn_commit.setEnabled(true);
            btn_cancel.setEnabled(true);
       }
        else {
            krn.Message("krn_sendMessage RETURNED: " + krn_sendMessage);
            
        }
    }//GEN-LAST:event_btn_newActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
           EOC_message msg = new EOC_message(this,"updaterow", "", "");
           String krn_sendMessage = krn.krn_sendMessage(this,msg,"update", "target");
           System.out.println("##..>>  PEMSONUPDTBEGINN: " + super.getPerms());
////        String krn_sendMessage = krn.krn_sendMessage
////         ((Object) this, "updaterow", "", "update", "target" , "");
        saveButtonStates();
        if (krn_sendMessage.equals("")) {
            btn_new.setEnabled(false);
            btn_copy.setEnabled(false);
            btn_edit.setEnabled(false);
            btn_delete.setEnabled(false);
            btn_commit.setEnabled(true);
            btn_cancel.setEnabled(true);
            if (!(MyCn==null)) {try {
                MyCn.getConn().setAutoCommit(false);
                } catch (SQLException ex) {
                    Logger.getLogger(Pnl_TXN.class.getName()).log(Level.SEVERE, null, ex);
                }
}
        }
    }//GEN-LAST:event_btn_editActionPerformed

    public boolean pushButton(String btnFn) {
        // System.out.println("Pushing button for: " + btnFn);
        if (btnFn.equalsIgnoreCase("new")) btn_new.doClick();
        else if (btnFn.equalsIgnoreCase("update")
                || btnFn.equalsIgnoreCase("edit")) btn_edit.doClick();
        else if (btnFn.equalsIgnoreCase("copy")) btn_copy.doClick();
        else if (btnFn.equalsIgnoreCase("delete")) btn_delete.doClick();
        else if (btnFn.equalsIgnoreCase("commit")) btn_commit.doClick();
        else if (btnFn.equalsIgnoreCase("cancel")) btn_cancel.doClick();
        else {
            Kernel.staticMsg("Neznáme tlačítko v TXN-paneli: " + btnFn);
        }
        //Kernel.staticMsg("Commit-tlačítko v TXN-paneli enablovany: " + btn_commit.isEnabled());
        // ked je enblovany, operacia sa nevydarila
        return !btn_commit.isEnabled();
    }
    
    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
           EOC_message msg = new EOC_message(this,"deleterow", "", "");
           String krn_sendMessage = krn.krn_sendMessage(this,msg,"update", "target");
////           String krn_sendMessage = krn.krn_sendMessage
 ////        ((Object) this, "deleterow", "", "update", "target" , "");
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_commitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_commitActionPerformed
           EOC_message msg = new EOC_message(this,"committxn", "", "");
////           krn.Message("TXNPNL_SEND_COMMITREQUEST");
           String krn_sendMessage = krn.krn_sendMessage(this,msg,"update", "target");
////        String krn_sendMessage = krn.krn_sendMessage
////         ((Object) this, "committxn", "", "update", "target" , "");
        if (krn_sendMessage.equals("")) {
            try {
////                CnEx.commit();
                if (!(MyCn==null)) { MyCn.getConn().commit(); }
            } catch (SQLException ex) {
                krn.OutPrintln("catch in Pnl TXNXXX");
               Logger.getLogger(Pnl_TXN.class.getName()).log(Level.SEVERE, null, ex);
               krn.Message(this,"E", ex.getMessage(),
                               "Chyba pri zápise transakcie do databázy");
               return; 
            }
////            krn.krn_sendMessage(this, msg, "update", "target" );
/*
            btn_new.setEnabled(true);
            btn_copy.setEnabled(true);
            btn_edit.setEnabled(true);
            btn_delete.setEnabled(true);
*/
////            System.out.println("AAAAAAAAAAAAAAAAA");
            btn_new.setEnabled(super.getPerms().contains("N"));
            btn_copy.setEnabled(super.getPerms().contains("C"));
            btn_edit.setEnabled(super.getPerms().contains("U"));
            btn_delete.setEnabled(super.getPerms().contains("D"));
            btn_commit.setEnabled(false);
            btn_cancel.setEnabled(false);
            
            ////System.out.println("BBBBBBBBBBBBB");
           //// krn.Message("BBBBBBBBBBBBBperms:" + super.getPerms());
        }
        else {
            if (!krn_sendMessage.startsWith("NOME-"))
               krn.Message("E", krn_sendMessage, "Chyba pri zápise !");
        }
    }//GEN-LAST:event_btn_commitActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
           EOC_message msg = new EOC_message(this,"rollbacktxn", "", "");
           String krn_sendMessage = krn.krn_sendMessage(this,msg,"update", "target");
////        String krn_sendMessage = krn.krn_sendMessage
////         ((Object) this, "rollbacktxn", "", "update", "target" , "");
        if (krn_sendMessage.equals("")) {
            try {
                MyCn.getConn().rollback();
            } catch (SQLException ex) {
                Logger.getLogger(Pnl_TXN.class.getName()).log(Level.SEVERE, null, ex);
            }
/*            
            btn_new.setEnabled(true);
            btn_copy.setEnabled(true);
            btn_edit.setEnabled(true);
            btn_delete.setEnabled(true);
*/
            restoreButtonStates();
            
            btn_new.setEnabled(super.getPerms().contains("N"));
            btn_copy.setEnabled(super.getPerms().contains("C"));
            btn_edit.setEnabled(super.getPerms().contains("U"));
            btn_delete.setEnabled(super.getPerms().contains("D"));
            
            btn_commit.setEnabled(false);
            btn_cancel.setEnabled(false);
        }
        else {
            krn.OutPrintln("krn_sendMessage::" + krn_sendMessage);
        }
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void saveButtonStates() {
        btnStates[0] = btn_new.isEnabled();
        btnStates[1] = btn_edit.isEnabled();
        btnStates[2] = btn_copy.isEnabled();
        btnStates[3] = btn_delete.isEnabled();
        btnStates[4] = btn_commit.isEnabled();
        btnStates[5] = btn_cancel.isEnabled();
    };
    
    private void restoreButtonStates() {
         btn_new.setEnabled(btnStates[0]);
         btn_edit.setEnabled(btnStates[1]);
         btn_copy.setEnabled(btnStates[2]);
         btn_delete.setEnabled(btnStates[3]);
         btn_commit.setEnabled(btnStates[4]);
         btn_cancel.setEnabled(btnStates[5]);
    };

    @Override
    public String receiveMessage(EOC_message eocMsg) {
////krn.Message("TXNPANNGETTING:" + eocMsg.getMessage() + " from:" + eocMsg.getSenderName());
    krn.debugOut(myObjectID, 5, "TXNPANN:" + getAccessibleContext().getAccessibleName()
        + "_GETTING:" + eocMsg.getMessage() + " fromObject:" + eocMsg.getSenderName() + " ownedBy:" + eocMsg.getOwnerName());
        if (!eocMsg.getMessage().contains("Available") && !eocMsg.getMessage().contains("goTo"))
    System.out.println("TXNPANN:" + getAccessibleContext().getAccessibleName()
        + "_GETTING:" + eocMsg.getMessage() + " fromObject:" + eocMsg.getSenderName() + " ownedBy:" + eocMsg.getOwnerName());
    
        // musi byt ako prva instrukcia v metode !!!
        if (eocMsg==null) return FnEaS.nullEocMessageResponse(myObjectID);
        
         krn.debugOut(this,5, "EOC_Pnl_TXN-receiving: " + eocMsg.getMessage());
////             System.out.println("@@@@@@PNLNAVRECEIV-" + sMessage);
//// System.out.println("TXNPANNRECEJVEL:" + eocMsg.getMessage());
    if (eocMsg.getMessage().equals("freezeInterface")) {
             krn.debugOut(this,0,  "receiving:" + eocMsg.getMessage());
             saveButtonStates(); 
            btnStates[0] = btn_new.isEnabled();
            btnStates[1] = btn_edit.isEnabled();
            btnStates[2] = btn_copy.isEnabled();
            btnStates[3] = btn_delete.isEnabled();
            btnStates[4] = btn_commit.isEnabled();
            btnStates[5] = btn_cancel.isEnabled();
             btn_new.setEnabled(false);
             btn_edit.setEnabled(false);
             btn_copy.setEnabled(false);
             btn_delete.setEnabled(false);
             btn_commit.setEnabled(false);
             btn_cancel.setEnabled(false);
             ((PObject)myObjectID).setEnabled(false); 
    //        krn.krnMsg("tgDisabled:");
             return "";
         }
         if (eocMsg.getMessage().equals("unfreezeInterface")) {
             krn.debugOut(this,0,  "receiving:" + eocMsg.getMessage());
             restoreButtonStates(); 
             ((PObject)myObjectID).setEnabled(true);
             ////krn.Message("UNFREEZEINTXNPANEL:" + FnEaS.sObjName(myObjectID));
             return "";
         }
     
         String supRetMsg = super.receiveMessage(eocMsg);
         if (supRetMsg.equals("")) return ""; // spravu spracoval rodic
         return "NOTRECEIVED";
     }   
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_commit;
    private javax.swing.JButton btn_copy;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_new;
    private javax.swing.JToolBar toolbar_update;
    // End of variables declaration//GEN-END:variables
}
