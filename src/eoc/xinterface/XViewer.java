/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eoc.xinterface;

import eoc.EOC_message;
import eoc.database.DBconnection;
import eoc.iEOC_DBtableField;
import eoc.widgets.DTfield;
import eoc.widgets.DTtextArea;
import java.awt.Color;
import system.Kernel;
import java.awt.Component;
import java.awt.KeyboardFocusManager;
import java.awt.event.FocusAdapter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import java.awt.event.FocusListener;
import java.awt.event.FocusEvent;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import system.FnEaS;

/**
 *
 * @author rvanya
 */
public class XViewer extends eoc.widgets.PObject implements eoc.IEOC_viewer {
    //private String ExternalTable;
    public String         sMasterTbl; // hlavna tabulka dotazu
    private String         sMasterKey; // primarny kluc tabulky dotazu
    private String[]       sSlaveTbls; // podriadene tabulky v dotaze
    private Integer          currentTblId = 0; // ID aktualneho riadku
    private Integer       oldCurrentTblId; // Naposledy spracovany ID
    private Integer          updatedTblId; // ID vytvoreneho/upravovaneho riadku
    private Object        owRowSource; // Zdroj, poskytujuci hodnotu sExternalKey
    ////private PreparedStatement      ps;
    private PreparedStatement      prepStat;
    private Statement              statStat;
    public ResultSet              rs;  
    private String          queryBase; // select * from eas_usrgrp
    private String        qryAppWhere; // eas_usrgrp.id_eas_usrgrp=?
//    private String[]    paramTypesAppWhere;    // typy parametrov             
    private String   qryFullStatement = ""; // poskladany dotaz
    private String   qryPrevStatement = ""; // predosly poskladany dotaz
    protected String           sTxnType; // typ transakcie ADD/COPY/UPDATE/DELETE
    private boolean         bIsOpened; // ci je dotaz otvoreny
    //private EOC_VisualObject    myObjectID;
    private String sExternalTable = ""; // cudzia riadiaca tabulka, na ktorom 
    // je dotaz browsera zavysly
    private String sExternalKey = ""; // meno stlpca cudzej tabulky, na ktorom
    // je dotaz browsera zavysly
    private String sExternalKeyDataType = ""; // datovy typ sExternalKey (cudzi kluc)
    // char,number,date,datetime,boolean,...
    private String sCurrentExternalKeyValue = ""; // aktualna hodnota vyhladavaneho kluca
    private String sOldCurrentExternalKeyValue = "";
    private String sEOCobjectType = "<EOC_XViewer_object_type_not_defined>";
    private FocusListener myFocusListener;     
    protected ArrayList<Object[]> alFieldValuePairs; 
  /**
     * Creates new form EOC_viewer
     */

    public XViewer() {
        setMyObjectID(this);
//        this.setFocusCycleRoot(true);
        setFocusCycleRoot(false);

        initComponents();
      //  UIManager.put("ToolTip.background", new ColorUIResource(255, 247, 200)); //#fff7c8

   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 241, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
        
    public String getExternalTable() {
        return sExternalTable;
    }

    public void setsExternalTable(String sExternTbl) {
        sExternalTable = sExternTbl;
    }

    public String getsExternalKey() {
       krn.OutPrintln("XViewer-getsExternalKey() returning: " + sExternalKey);
        return sExternalKey;
    }

    public String getsExternalKeyDataType() {
       krn.OutPrintln("XViewer-getsExternalKeyType() returning: " + sExternalKeyDataType);
        return sExternalKeyDataType;
    }

    public String getsCurrentExternalKeyValue() {
       krn.OutPrintln("XViewer-getsCurrentExternalKeyValue() returning: " + sCurrentExternalKeyValue);
        return sCurrentExternalKeyValue;
    }

    
    public String setsExternalKey(String sExtKeyName, String sExtKeyDataType) {
        sExternalKey = sExtKeyName;
        sExternalKeyDataType = sExtKeyDataType;
        return "";
    }
    
    @Override
    public String initialize(Kernel kr, DBconnection cX) {
           if (bInitialized) return "";
           super.initialize(kr,cX);
           setMyObjectID(this);
           setEOC_objectType("EOC_XViewer");
           myFocusListener = //this.getMyFocusListener();
                             new eoc.EOCFocusListener();
           super.addFocusListener(myFocusListener);
           alFieldValuePairs = new ArrayList<>();
           if (1==2) {
        try {
            // test atributov objektov, ci su logicky v poriadku
            
            krn.initializeDbOjects(MyCn, this,sMasterTbl);
            krn.manageWidgetTree((eoc.IEOC_VisualObject) this, (JPanel) this,"*", true/*remanage*/);
        } catch (SQLException ex) {
            Logger.getLogger(eoc.xinterface.XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
           }
        bInitialized = true;
        return "";
    }
    
    @Override
    public String afterInitialize() {
           if (1==1) {
        try {
            // test atributov objektov, ci su logicky v poriadku
            krn.initializeDbOjects(MyCn, this,sMasterTbl);
            krn.manageWidgetTree((eoc.IEOC_VisualObject) this, (JPanel) this,"*", true/*remanage*/);
        } catch (SQLException ex) {
            Logger.getLogger(eoc.xinterface.XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
           }
       krn.krn_clearWidgets(this, "add");
         goToRow(null);            
      return "";
   }
    
    public void refreshFormatters() {
        krn.krn_refreshFormatters(this);
    }
    
    @Override
    public String rowValuesChanged() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public String rowIdentificatorChanged(String sNewTableId) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    private void set_owRowSource() {
        // ziska pointer row-source objetu, pokial estenie je inicializovana 
       if (owRowSource==null) {
            owRowSource=krn.getLinkPartner(myObjectID, "ROW", "SOURCE");
        }
    }

    public Object getoRowSource() {
        //!@@ sem patri asi vratenie XQuery objektu, ale to je este otazne 
        // - 2013.5.8 - (den vytazstva :-)) )
        return owRowSource;
    }
    
    @Override
    public String goToRow(EOC_message eocMsg) {
       //// krn.OutPrintln((bInitialized) + "gotro" +sMsg+"<<<>>>"+myObjectID);
        if (!bInitialized || myObjectID==null) {return "";}
        krn.debugOut(this, 5, "Xviewer-Going to row: "  
                + (eocMsg!=null?eocMsg.getParameters():"<NULL>"));
        String sVal = "";
        oldCurrentTblId = currentTblId; // zistenie noveho hlavneho ID-u
        set_owRowSource();
        if (owRowSource != null) {
            /* V2 stile
            eoc.widgets.PObject vobj = (eoc.widgets.PObject) owRowSource;
            String objtype =  vobj.getEOC_objectType();
            if (objtype.endsWith("EOC_dbtable")) {
               eoc.widgets.DBtable dbt = (eoc.widgets.DBtable) owRowSource; 
               sVal = dbt.getColVal(sMasterKey);
            }
            else if (objtype.endsWith("EOC_XTable")) {
               eoc.xinterface.XTable dbt = (eoc.xinterface.XTable) owRowSource; 
               sVal = dbt.getColVal(sMasterKey);
            }
            */
            // V2.5 stile
            if (currentTblId==null &&  eocMsg == null) 
                sVal = null;
            else
                sVal = eocMsg != null?eocMsg.getParameters():currentTblId.toString();
            if (sVal == null) {return "";}; // TOTO NIE JE V PORIADKU !!!!
            String siVal = sVal; // ked je aj s nazvom stlpca, vybere sa hodnota
            if (sVal.contains("=")) {
                ////System.out.println("SLITTINGGG:" + sVal);
                String[] ss = sVal.split("=");
                siVal = ss[ss.length - 1];
            }
            try {
                currentTblId = Integer.valueOf(siVal);
            }
            catch (Exception ex) {
                siVal = null;
            }
        }
        this.setAppWhere (sMasterTbl + "." + sMasterKey + " = ?");
        krn.debugOut(this, 0, "Going to row: 2");
        String rebuildQuery = this.rebuildQuery();
        if (FnEaS.sObjName(myObjectID).contains("view_ESU_ulohy"))
        krn.OutPrintln("1 XViewer_view_ESU_ulohy_Going to row id:" + currentTblId +
           " qry=" + qryFullStatement);
        krn.debugOut(this, 0, "Going to row: 3");
        /*
        try {
//            if ps.isClosed() ps.
            ps.setInt(1, currentTblId);
        } catch (SQLException ex) {
            Logger.getLogger(EOC_XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        this.OpenQuery();
        try {
        if (FnEaS.sObjName(myObjectID).contains("view_ESU_ulohy")) {
            krn.OutPrintln("2 XViewer_view_ESU_ulohy_Going to row id:" + currentTblId +
                    " qry=" + qryFullStatement + " AA: (rs == null) + rs.isClosed():" + 
                    (rs == null) + (rs.isClosed()) + " tbid:" + currentTblId
            );
        }    
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
          // OKAMYH PRAVDY ???
        displayRow();
        try {
           if (FnEaS.sObjName(myObjectID).contains("view_ESU_ulohy"))
           krn.OutPrintln("3 XViewer_view_ESU_ulohy_Going to row id:" + currentTblId +
                    " qry=" + qryFullStatement + " BB: (rs == null) + rs.isClosed():" + 
                    (rs == null) + (rs.isClosed()) /* + (!rs.isFirst()) + " getroww:"  + rs.getRow() */ + " tbid:" + currentTblId
            );
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
          // TUTTI !!! :-)
        krn.debugOut(this, 5, "Going to row: "  + sVal + " finished");           // TUTTI !!! :-)
          
        EOC_message msg = new EOC_message(myObjectID,"goToRow","", "");
        krn.krn_sendMessage(myObjectID, msg, "row", "target");
        try {  
            //rs.
            String mmsg = ((rs == null || rs.isClosed() || (!rs.isFirst()))
                    ?"noRowAvailable":"rowAvailable");
            ////System.out.println(">>MMSG:" + mmsg);
            EOC_message msg2 = new EOC_message(myObjectID,mmsg,"", "");
            krn.krn_sendMessage(myObjectID,msg2,"update", "source");
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
////        krn.krn_sendMessage((Object) myObjectID, "goToRow",
////              sMasterTbl + "=" + sMasterKey, "row", "target", "");         
          
          return "";
   }
    
    @Override
    public String setMasterTable(String sMstTblName) {
       sMasterTbl = sMstTblName;
       krn.debugOut(this, 0, "setting sMasterTbl to: "  + sMstTblName);
       ////System.out.println("xviewer.setMasterTable()" + sMasterTbl);
       return "";
    }
    
   public String getMasterTable() {
       //// System.out.println("xviewer.getMasterTable()" + sMasterTbl);
       return sMasterTbl;
   }
   
    @Override
    public String receiveMessage(EOC_message eocMsg) {

        // musi byt ako prva instrukcia v metode !!!
        if (eocMsg==null) return FnEaS.nullEocMessageResponse(myObjectID);
        
         ////krn.debugOut(this,0, "eeEOC_viewer-receiving: " + eocMsg.getMessage());
         String supRetMsg = super.receiveMessage(eocMsg);
        //// krn.debugOut(this,0, "ffEOC_viewer-receiving: " + eocMsg.getMessage() + "SUPER return: " + supRetMsg);
        krn.debugOut(myObjectID, 5, "EOC_viewer:" + getAccessibleContext().getAccessibleName()
        + "_GETTING:" + eocMsg.getMessage() + " fromObject:" + eocMsg.getSenderName() + " ownedBy:" + eocMsg.getOwnerName());
        if (!eocMsg.getMessage().contains("Available") && !eocMsg.getMessage().contains("goTo"))
        System.out.println("EOC_viewer:" + ((JPanel)myObjectID).getAccessibleContext().getAccessibleName()
        + "_GETTING:" + eocMsg.getMessage() + " fromObject:" + eocMsg.getSenderName() + " ownedBy:" + eocMsg.getOwnerName());
     ///krn.OutPrintln("supRetMsg>>" + supRetMsg);
         if (supRetMsg.equals("")) { return ""; }
         if (eocMsg.getMessage().equals("goToRow")) {
             krn.OutPrintln("gotorow-eoc_wiever=" + eocMsg.getParameters());
            return goToRow(eocMsg);
            /*
               oldCurrentTblId = currentTblId; // zistenie noveho hlavneho ID-u
               // currenttblid  = (long) sParameters;
                currentTblId = null;

            String setAppWhere = this.setAppWhere (sMasterTbl + "." + sMasterKey 
                                         + " = " + currentTblId.toString());
            String rebuildQuery = this.rebuildQuery();
            String openQuery = this.openQuery();
            krn.debugOut(this,5,  "received:" + sMessage);
            return "";
            * */
        }
        if (eocMsg.getMessage().equals("addrow")) {
             krn.OutPrintln("addrow-eoc_wiever=" + eocMsg.getParameters());
            return addrow(eocMsg);
        }
        if (eocMsg.getMessage().equals("rollbacktxn")) {
             krn.OutPrintln("rollbacktxn-eoc_wiever=" + eocMsg.getParameters());
            return rollbacktxn(eocMsg);
        }
        return "NOTRECEIVED";
     }

    @Override
    public String getQueryBase() {
        return queryBase;
    }

    @Override
    public String setQueryBase(String queryBase) {
        this.queryBase = queryBase;
        krn.debugOut(this,5,"Setting gueryBase to " + queryBase);
        return "";
    }

    @Override
    public String rebuildQuery() {
        if (queryBase == null || queryBase.equals("")) {
            return "EOC-ERR=Prázdna definícia základu dotazu !"; // CHYBA
        }
        qryPrevStatement = qryFullStatement; //odlozenie predosleho dotazu
        qryFullStatement = queryBase + " where " + qryAppWhere 
                                      /*+ " order by " + sMasterKey*/;
       if (!qryFullStatement.equals(qryPrevStatement) || prepStat==null) { try {
           //krn.OutPrintln("qqqryFullStatement.equals(qryPrevStatement=="
           //+ qryFullStatement + "!==" + qryPrevStatement);
           // zmenil sa dotaz
           if (!(prepStat==null)) prepStat.close();
           ////krn.OutPrintln("NEW FULL QRYSTATEMENT = " + qryFullStatement);
           
           prepStat = MyCn.getConn().prepareStatement(qryFullStatement.replace("?", "??"), 
                   ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            } catch (SQLException ex) {
                System.out.println("XXXEX=> " + (ex==null));
                krn.OutError(ex);
                //Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       krn.debugOut(this,5,"queryFullStatement = " +  qryFullStatement); 
      return ""; 
    }

    @Override
    public String OpenQuery() {
        krn.debugOut(this,5," Opening query: " + qryFullStatement);
        System.out.println(" >>>>###>>>> Opening query: " + qryFullStatement
        + " currentTblId==" + currentTblId
        + "/n dbtype:" + MyCn.getDBType());
        try {
           if (currentTblId==null) {
               rs.close();
               return "";
           }
           if (prepStat==null || prepStat.isClosed()) 
           {
               System.out.println("VIIIWEEER 1:-> qryFullStatement==" + qryFullStatement + "  CONCUR_READ_ONLY");
               prepStat = MyCn.getConn().prepareStatement(qryFullStatement,
                    ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
           }    
           if (currentTblId != null) {
              if (!MyCn.getDBType().equals("POSTGRES")) {
                  prepStat.setInt(1, currentTblId);
              }    
           }   

           System.out.println("VIIIWEEER 2:-> qryFullStatement==" + qryFullStatement + "  CONCUR_READ_ONLY"
           + "/n dbtype:" + MyCn.getDBType());
   
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (MyCn.getDBType().equals("POSTGRES")) {
               statStat = MyCn.getConn().createStatement();
               rs = statStat.executeQuery(qryFullStatement.replace("?", currentTblId.toString()));
            }
            else {
               prepStat.setInt(1, currentTblId);
               rs = prepStat.executeQuery(); // otvorenie dotazu
            }
            rs.next();
            
            if (rs.getRow()==0) {   // dotaz je prazdny 
            // sprava o dosiahnuti prveho riadku    
           // krn.krn_sendMessage((Object) this, "NoRow","",
                                 //             "update", "source", "");
            }
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }

        return "";
    }

    @Override
    public String getAppWhere() {
        return qryAppWhere;
    }

    @Override
    public String setAppWhere(String appWhere) {
        this.qryAppWhere = appWhere;
        return "";
    }

    @Override
    public String addrow(EOC_message eocMsg) {
         sTxnType = "add";
// System.out.println("XViewer-addrowA");
         clearWidgets();
// System.out.println("XViewer-addrowB");
         enableWidgets();
// System.out.println("XViewer-addrowC");
         return "";
    }

    @Override
    public String copyrow(EOC_message eocMsg) {
        sTxnType = "copy";
        enableWidgets();
        return "";
    }

    @Override
    public String updaterow(EOC_message eocMsg) {
         sTxnType = "update";
          enableWidgets();
          //krn.krnMsg("updaterow");
         return "";
    }

    @Override
    public String deleterow(EOC_message eocMsg) {
       sTxnType = "delete";
       if (krn.krnQuest("QN","Vymazať aktuálnu vetu ?","")) {
          try {
              String stm = "";
                     stm = "delete from " + sMasterTbl + " where " 
                         + sMasterKey + " = "  + currentTblId.toString();
              ResultSet rss; // pomocny resultset
              PreparedStatement pss = MyCn.getConn().prepareStatement(stm);
              pss.execute();             
              pss.close(); // ????????    
              MyCn.getConn().commit();
              EOC_message msg = new EOC_message(myObjectID,"rowDeleted",currentTblId.toString(), "");
              krn.krn_sendMessage(myObjectID, msg, "row", "source");
////              EOC_message eocMsg  = new EOC_message(this,this, "rowDeleted", currentTblId.toString(), "row", "source" , "");
////              krn.krn_sendMessage
////               ((Object) this, "rowDeleted", currentTblId.toString(), "row", "source" , "");
          } 
          catch (SQLException ex) {
             krn.Message(this,"E", ex.getMessage(),"Chyba pri pokuse o výmaz vety: " );
             return "UPDATE_ERROR" +  ex.getMessage();
          }                                              
          finally {
             sTxnType = "";
             return "";
          }
       }
       sTxnType = "";
       return "";
    }
    
    public String noRowAvailable(EOC_message eocMsg) {
         currentTblId = null;
         closeQuery();
         clearWidgets();
         //disableWidgets();
         EOC_message msg = new EOC_message(myObjectID,"noRowAvailable","", "");
         krn.krn_sendMessage(myObjectID,msg,"update", "source");
////         krn.krn_sendMessage((Object) myObjectID,
////                 "noRowAvailable", "", "update", "source", "");
         

         return "";
    }

    /*
    public String permissionChanged(EOC_message eocMsg) {
         EOC_message msg = new EOC_message(myObjectID,"permissionChanged", perms, "");
         perms = eocMsg.getParameters();
         krn.krn_sendMessage(myObjectID,msg,"*","source");
////         krn.krn_sendMessage((Object) this,
////                 "permissionChanged", perms, "*","source", "");
       return "";
    }  
*/    
    public String commitWidgets() {

        Component cFocused;
        cFocused = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();

        if (cFocused instanceof DTfield) {
            DTfield df = (DTfield) cFocused;
            try {
                if (df.getFormatter() != null)
                    df.commitEdit();
                else
                    df.commitScreenValue();
            } catch (ParseException ex) {
                Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            else if (cFocused instanceof DTtextArea) {
               DTtextArea dta = (DTtextArea) cFocused;
               dta.commitScreenValue();
        }
        return "";
    }
    
    @Override
    public String committxn(EOC_message eocMsg) {
    
    commitWidgets();    
    
        set_owRowSource(); // nastavenie zdroja riadkov (ked este nebol nastaveny) 
        eoc.widgets.PObject prs = (eoc.widgets.PObject) owRowSource;
        
        if (sExternalKey.equals("")||sExternalKey.equals(null)) {
           sExternalKey = 
                   prs.CallMethod(myObjectID,"getsExternalKeyInMyTable",null);
        }
        
        if (!sExternalKey.equals("")) {
           sCurrentExternalKeyValue = 
                   prs.CallMethod(myObjectID,"getsCurrentExternalKeyValue",null);
        }
      
        String stm = "";
        if (sTxnType.equals("update")) {
            stm = krn.getUpdateStatement(MyCn.getConn(),this,sMasterTbl,alFieldValuePairs);   
            ////System.out.println("SUPERCOMMITERRvalpairlength:" + alFieldValuePairs.size());
            
            stm = stm + " where " + sMasterKey + " = "  + currentTblId.toString();
            stm = "update " + sMasterTbl + " set " + stm;
            //krn.OutPrintln("stm.toString()" + stm.toString());
        }
/////        System.out.println("COMMITDDD sExternalKey==" + sExternalKey + " sCurrentExternalKeyValue==" + sCurrentExternalKeyValue);
        
        if (sTxnType.equals("add") || sTxnType.equals("copy") ) {
            /* priklad pouzitia v overridovanej funkcii 
            ** nemazte priklad, kopirujte do override-ovanej metody
            ** !!PRED!! volanie super.metody, aby mala k dispozicii
            ** premennu s platnymi hodnotami
            
            alFieldValuePairs.clear();
            Object[] avl = new Object[2];
            avl[0] = "id_eas_grpusr";
            avl[1] = 4;
            alFieldValuePairs.add(avl);
            */
            stm = krn.getInsertStatement(MyCn.getConn(),this,sMasterTbl,
                  sExternalKey,sExternalKeyDataType,sCurrentExternalKeyValue,
                  alFieldValuePairs);   
        ////krn.krnMsg("committxn->INSERT-STM=" + stm);
////        krn.OutPrintln("committxn->INSERT-STM=" + stm);
        
        }
////       krn.Message("####>>>>>>XVIEWERR_committxn_CALLINGSTATEMENT:" + stm 
////               + "\nmsggsender:" + eocMsg.getSenderName() + "...msg:" + eocMsg.getMessage()
////        + "...param: " + eocMsg.getParameters());
       //// kokotina- odkial to ide a preco -- if (stm==null || stm.trim().equals("")) return "";
        try {    
           ResultSet rss; // pomocny resultset
////           PreparedStatement pss = MyCn.prepareStatement(stm);
           Statement stmt = MyCn.getConn().createStatement();
////           pss.execute(); 
////           System.out.println("EXECUUTIIING: " + stm);
           stmt.executeQuery(stm);
////           stmt.close(); // ????????    
////           MyCn.commit();
           krn.OutPrintln("TRANSACTION COMMITTED");
           if (sTxnType.equals("add") || sTxnType.equals("copy") ) {
              if (MyCn.getDbDriver().getDBtype(MyCn.getConn()).equals("SYBASE")) {
////                 pss = MyCn.prepareStatement("select @@identity as sCurrKey");
                 stm = "select @@identity as sCurrKey";
              }
              if (MyCn.getDbDriver().getDBtype(MyCn.getConn()).equals("POSTGRES")) {
////                 pss = MyCn.prepareStatement("SELECT currval('tblmasterid') as sCurrKey");
                 stm = "SELECT currval('tblmasterid') as sCurrKey";
              }
              ResultSet myrss = stmt.executeQuery(stm);
              myrss.next();
              updatedTblId = myrss.getInt("sCurrKey");
              /////System.out.println(">>>>INSERTED_RW_IDIS:::" + updatedTblId);
               MyCn.getConn().commit();
          
           }
           else if (sTxnType.equals("update")) { 
              updatedTblId = currentTblId;
               MyCn.getConn().commit();
               OpenQuery(); 
               displayRow();
           }
////        System.out.println("COMMITEEE");

////           System.out.println("Z KEREJ PICE JE updatedTblId=" + updatedTblId + " " + sTxnType
////           + " TU JE STM:" + stm); // ID
////          ODPOVED:  V eas_uni_cis ma AUTOINCREMENT omylom zapnuty 
////          aj stlpec id_eas_uni_cis_def
           krn.debugOut(this,5,"updatedTblId=" + updatedTblId); // ID
////           pss.close(); // ????????    
           stmt.close(); // ????????    
           MyCn.getConn().commit();
           aftercommit(null);
           disableWidgets();
           return "";
        } 
        catch (SQLException ex) {
          ////   System.out.println("COMMITFFF");
      String errMsg = ex.getMessage();
           errMsg = errMsg.replace("[Sybase][JDBC Driver][SQL Anywhere]RAISERROR executed:", "");
         ////System.out.println("COMMITGGG");
         ////2016-09-13 
         krn.Message(this,"E", errMsg,"Chyba pri zápise: " );
        ////System.out.println("COMMITJJJ");
         ////  krn.OutPrintln("Chyba pri zápise: " + "UPDATE_ERROR -> " +  ex.getMessage());
           return "NOME-UPDATE_ERROR" +  ex.getMessage();
        }                                              
     }

     @Override
    public String aftercommit(EOC_message eocMsg) {
        /*
        Method localaftercommit;
        localaftercommit = krn.getMethod(myObjectID, "localaftercommit");
        if (localaftercommit != null) 
          try {
              localaftercommit.invoke(myObjectID, "");
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        //System.out.println("HURRAA-super__aftercommit");

       //// krn.Message("HURRAA-super__aftercommit 1");
        oldCurrentTblId = currentTblId;
        currentTblId    = updatedTblId;
        ///disableWidgets();
        
        if (sTxnType.equals("update")) {
            EOC_message msg = new EOC_message(myObjectID,"rowUpdated", currentTblId.toString(), "");
            krn.krn_sendMessage(myObjectID, msg, "row", "source");
////            krn.krn_sendMessage
////            ((Object) this, "rowUpdated", currentTblId.toString(), "row", "source" , "");
        }
       // QQQ - sem patri test, ci nie je viewer grouptxn targetom, potom
       // odosiela id tabulky grouptxn source !!!
        if (sTxnType.equals("add") || sTxnType.equals("copy") ) {
            EOC_message msg = new EOC_message(myObjectID,"rowCreated", currentTblId.toString(), "");
            krn.krn_sendMessage(myObjectID, msg, "row", "source");
////            krn.krn_sendMessage
////              ((Object) this, "rowCreated", currentTblId.toString(), "row", "source" , "");
        }
        disableWidgets();
        try {
            MyCn.getConn().commit();
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        /////krn.Message("HURRAA-super__aftercommit 2");
        sTxnType = "";
        krn.debugOut(this,0, "Zápis OK");
        return "";
    }

   @Override
    public String rollbacktxn(EOC_message eocMsg) {
         disableWidgets();
////          krn.krnMsg("disabled_wgAAA");
         displayRow();
////          krn.krnMsg("displayed_wgBBB");
        sTxnType = "";
       return "";
    }
    
    @Override
    public String displayRow() {
        try {
            if (rs!=null) {// 2016-03-23 
               /////  System.out.println("DIROWW: " + (sMasterTbl == null) + " RSS: " + rs);
               krn.krn_displayRow((JPanel) this,sMasterTbl, rs);
            }
        } catch (SQLException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }


    @Override
    public String enableWidgets() {
         if (!sExternalKey.equals("")) {
         }
////         System.out.println("XVIVRR:" + (((JPanel) this)==null) + " >>TXN: " + sTxnType);
         krn.krn_enableWidgets((JPanel) this,sTxnType);
         String tblid = currentTblId == null?"0":currentTblId.toString();
         EOC_message msg = new EOC_message(myObjectID,"freezeInterface","", "");
         krn.krn_sendMessage(myObjectID, msg, "row", "source");
////         krn.krn_sendMessage
////             ((Object) this, "freezeInterface",tblid , "row", "source" , "");
         return "";
 }

    @Override
    public String disableWidgets() {
         //krn.krnMsg("revaliiiid");
         krn.krn_disableWidgets((JPanel) this);
         this.revalidate();
         //krn.krnMsg("revaliiiid");
         EOC_message msg = new EOC_message(myObjectID,"unfreezeInterface","", "");
         krn.krn_sendMessage(myObjectID, msg, "row", "source");
////          krn.krn_sendMessage
////             ((Object) this, "unfreezeInterface", "", "row", "source" , "");
         return "";
    }

    @Override
    public String clearWidgets() {
        krn.krn_clearWidgets((JPanel) this,sTxnType);
        return "";
 }

   @Override
   public String rebuildAndOpenQuery() {
      throw new UnsupportedOperationException("Not supported yet.");
   }

   @Override
   public String closeQuery() {
      try {
         rs.close();
         //// krn.OutPrintln("XVIEWER - CLOSING QUERY");
         prepStat.close();
         clearWidgets();
         return "";
      } catch (SQLException ex) {
         Logger.getLogger(XViewer.class.getName()).log(Level.SEVERE, null, ex);
      }
      return "Neurcite ukoncenie closeQuery()";
   }

    @Override
    public String setMasterKey(String sMstKeyName) {
        sMasterKey = sMstKeyName;
        return "";
    }

    public String getMasterKey() {
        return sMasterKey;
    }
    public String getMasterKeyValue() {
        String id = (currentTblId!=null?currentTblId.toString():null);
        return id;
    }

    public String getUpdatedTblID () {
        String id = (updatedTblId!=null?updatedTblId.toString():null);
        return id;
    }
    
   public void sformFocusLost(java.awt.event.FocusEvent evt) {
      krn.OutPrintln("sformFocusLost");
   }

   public void sformFocusGained(java.awt.event.FocusEvent evt) {
      krn.OutPrintln("sformFocusGained");
   }
   
   public void treatRetVal(Component c, String retVal) {
      //krn.krnMsg("XViewer -> Returned from vyber = " + retVal + "for " + c.getClass());
      //(Object) c.getClass().setText();
      eoc.widgets.DTfield dtf = (eoc.widgets.DTfield) c;
      dtf.setText(retVal);
   }
   
    @Override
    public FocusListener getMyFocusListener() {
        return myFocusListener;
    }

    void displayMessage(String prefix, FocusEvent e) {
/*        krn.OutPrintln(prefix
                       + (e.isTemporary() ? " (temporary):" : ":")
                       + e.getComponent().getClass().getName()
                       + "; Opposite component: "
                       + (e.getOppositeComponent() != null ?
                          e.getOppositeComponent().getClass().getName() : "null")
                       ); 
        */
    }
    
    public String getTxnType() {
        return sTxnType;
    }

    @Override
    public String refresh() {
        System.out.println("##### REFRESHING BASMEKK ########");
          return displayRow();
    }

//    public iEOC_DBtableField krn_get_DTobject(JPanel jp, String tbl, String fld) throws SQLException, ParseException {
    public iEOC_DBtableField get_DTobject(String tbl, String fld) {

      iEOC_DBtableField retObj = null;

      retObj = krn.krn_get_DTobject((JPanel) myObjectID,tbl,fld);  

      return retObj;
    }
    
    public String get_DTobjectString(String tbl, String fld) {

      String retObj = null;

      retObj = krn.krn_get_DTobjectString((JPanel) myObjectID,tbl,fld);  

      return retObj;
    }
    
    public String get_DTobjectText(String tbl, String fld) {

      String retObj = null;

      retObj = krn.krn_get_DTobjectText((JPanel) myObjectID,tbl,fld);  

      return retObj;
    }

    public String enablingWidgets (String sParam) {
      //  krn.krnMsg("enablingWidgetsA return ''");
      disableWidgets(); 
      EOC_message msg = new EOC_message(myObjectID,"targetDisabled","", "");
      krn.krn_sendMessage(myObjectID, msg, "update", "source");
////      krn.krn_sendMessage((Object) myObjectID,
////               "targetDisabled", "", "update", "source", "");
      EOC_message msg1 = new EOC_message(myObjectID,"enablingWidgets",sParam, "");
      krn.krn_sendMessage(myObjectID, msg1, "row", "source");
////         krn.krn_sendMessage
////             ((Object) this, "enablingWidgets", sParam, "row", "source" , "");
       //krn.krnMsg("enablingWidgetsB return ''");
//nemsegit-nemsegit :o))
       return "";
    }    
    
    public String disablingWidgets (String sParam) {
       enableWidgets(); 
       EOC_message msg = new EOC_message(myObjectID,"targetEnabled","", "");
       krn.krn_sendMessage(myObjectID, msg, "update", "source");
////       krn.krn_sendMessage((Object) myObjectID,
////               "targetEnabled", "", "update", "source", "");
      EOC_message msg1 = new EOC_message(myObjectID,"disablingWidgets",sParam, "");
      krn.krn_sendMessage(myObjectID, msg1, "row", "source");
////         krn.krn_sendMessage
////             ((Object) this, "disablingWidgets", sParam, "row", "source" , "");
         /*
         krn.krn_sendMessage((Object) myObjectID,
                 sCurrentRowStatus, "", "navigation", "source", "");
             krn.krn_sendMessage((Object) myObjectID,
                 sCurrentRowStatus, "", "row", "target", "");
         */
       return "";
    }    
    
    public String freezeInterface (EOC_message eocMsg) {
       ((JPanel) myObjectID).setEnabled(false);
      //  krn.krnMsg("enablingWidgetsA return ''");
       EOC_message msg = new EOC_message(myObjectID,"freezeInterface","", "");
       krn.krn_sendMessage(myObjectID,msg,"update", "source");
////      krn.krn_sendMessage(oOwner, (Object) myObjectID,
////               "freezeInterface", "", "navigation", "source", "");
       //EOC_message msg = new EOC_message(myObjectID,"freezeInterface","", "");
////       krn.krn_sendMessage(myObjectID,msg,"row", "source");
////         krn.krn_sendMessage
////             ((Object) this, "freezeInterface", sParam, "row", "source" , "");
       //EOC_message msg = new EOC_message(myObjectID,"freezeInterface","", "");
////       krn.krn_sendMessage(myObjectID,msg,"row", "target");
////         krn.krn_sendMessage
////             ((Object) this, "freezeInterface", sParam, "row", "target" , "");
       //krn.krnMsg("enablingWidgetsB return ''");
//nemsegit-nemsegit :o))
       return "";
    }    
    
    public String unfreezeInterface (EOC_message eocMsg) {
       ((JPanel) myObjectID).setEnabled(true);
       EOC_message msg = new EOC_message(myObjectID,"unfreezeInterface","", "");
       krn.krn_sendMessage(myObjectID,msg,"update", "source");
////       krn.krn_sendMessage((Object) myObjectID,
////               "unfreezeInterface", "", "navigation", "source", "");
////       krn.krn_sendMessage(myObjectID,msg,"row", "source");
////         krn.krn_sendMessage
////             ((Object) this, "unfreezeInterface", sParam, "row", "source" , "");
////       krn.krn_sendMessage(myObjectID,msg,"row", "target");
////         krn.krn_sendMessage
////             ((Object) this, "unfreezeInterface", sParam, "row", "target" , "");
         /*
         krn.krn_sendMessage((Object) myObjectID,
                 sCurrentRowStatus, "", "navigation", "source", "");
             krn.krn_sendMessage((Object) myObjectID,
                 sCurrentRowStatus, "", "row", "target", "");
         */
       return "";
    }    
     
    
}
