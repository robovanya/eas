/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package eoc.calendar;

import eoc.EOC_message;
import eoc.SortedComboBoxModel;
import eoc.widgets.PObject;
import java.awt.AWTEvent;
import java.util.Hashtable;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * 
 * @author rvanya
 */
public class Pnl_owner_source extends PObject {

    /**
     * Creates new form owner_source
     */
    Object[][] calAccounts;
    String loadedAccountIDs; // ulozenie identifikatorov tabulky eas_calAccount
                             // delene ciarkou
    String freezedOwner = "";
    Hashtable<String,CalendarOwner> htOwnerObjects = new Hashtable<>();
    boolean allAccountsLoaded = false;
    boolean bSingle = false;
    public Pnl_owner_source() {
        initComponents();
    }

    @Override
    public String afterInitialize() {
        jCB_OwnerName.setSelectedIndex(0);
        super.afterInitialize(); //To change body of generated methods, choose Tools | Templates.
        return "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCB_OwnerType = new javax.swing.JComboBox<String>();
        jCB_OwnerName = new javax.swing.JComboBox<String>();
        jCB_allCalendars = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCB_OwnerType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Užívateľ", "Údržbár", "Vozidlo", "ESU", "Poznámky" }));
        jCB_OwnerType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_OwnerTypeActionPerformed(evt);
            }
        });

        jCB_OwnerName.setMaximumRowCount(50);
        jCB_OwnerName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<nenačítané>" }));
        jCB_OwnerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_OwnerNameActionPerformed(evt);
            }
        });

        jCB_allCalendars.setText("Všetky kalendáre ukazovať spolu");
        jCB_allCalendars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_allCalendarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCB_OwnerType, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCB_allCalendars, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(jCB_OwnerName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCB_OwnerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCB_allCalendars)
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCB_OwnerType)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCB_OwnerTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_OwnerTypeActionPerformed
////        System.out.println("jcbselecTIONNN:" + jCB_OwnerType.getSelectedItem());
        load_accounts_for(jCB_OwnerType.getSelectedItem());
    }//GEN-LAST:event_jCB_OwnerTypeActionPerformed

    private void jCB_OwnerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_OwnerNameActionPerformed
////       System.out.println("CURRENTTT calendarOwner is: " + jCB_OwnerName.getSelectedItem());
       String sOwNm = jCB_OwnerName.getSelectedItem().toString();
       CalendarOwner ownObj = (CalendarOwner) htOwnerObjects.get(sOwNm);
         EOC_message msg = new EOC_message(myObjectID,"goToOwner",ownObj, "");
         krn.krn_sendMessage(myObjectID, msg, "calendarOwner", "target");
////         krn.krn_sendMessage((Object) myObjectID, "goToOwner",
////                              ownObj, "calendarOwner", "target", "");         
    }//GEN-LAST:event_jCB_OwnerNameActionPerformed

    private void jCB_allCalendarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_allCalendarsActionPerformed
        jCB_OwnerName.setEnabled(!jCB_allCalendars.isSelected());
        if (jCB_allCalendars.isSelected()) {
            String sOwNm = jCB_OwnerName.getSelectedItem().toString();

            // Vytvorenie CalendarEvent objektu na odoslanie skupinovej udalosti
            CalendarOwner ownObj = (CalendarOwner) htOwnerObjects.get(sOwNm);
            CalendarOwner ownGrpObj = new CalendarOwner(ownObj.getAccountrow());
/*****
 * DOTAZ PRE ZISKANIE UDAJOV STANDARDNEHO CALENDAROWNER-OBJEKTU
            calAccounts = krn.SQL_getQueryResultSetAsArray(MyCn, 
            "SELECT id_eas_calAccount,c_accountOwnerType,c_owner_table," +
            "id_c_owner_table,c_owner_name,c_owner_pozn FROM eas_calAccount",
 * STANDARDNY ROZPIS VYSLEDKU DOTAZU V OBJEKTE
        setId_eas_calAccount(Integer.parseInt(account_row[0].toString()));
        setAccountOwnerType(account_row[1].toString());
        setOwnerTable(account_row[2].toString());
        setId_ownerTable(Integer.parseInt(account_row[3].toString()));
        setOwnerName(account_row[4].toString());
        setOwnerPozn(account_row[5].toString());
******/
            // Uprava CalendarEvent-objektu pre odoslanie skupiny
            ownGrpObj.setId_eas_calAccount(-9999); // PRIZNAK SKUPINY
            ownGrpObj.setOwnerName("Celá skupina");
            ownGrpObj.setOwnerPozn(loadedAccountIDs);
            System.out.println("SENDING_GRP_REQUEST:::");
            // Odosle sa specialne upraveny CalendarEvent-objekt 
            EOC_message msg = new EOC_message(myObjectID,"goToOwner",ownGrpObj, "");
            krn.krn_sendMessage(myObjectID, msg, "calendarOwner", "target");
////            krn.krn_sendMessage((Object) myObjectID, "goToOwner",
////                                 ownGrpObj, "calendarOwner", "target", "");         
        }
        else {
            jCB_OwnerNameActionPerformed(null);
        }
    }//GEN-LAST:event_jCB_allCalendarsActionPerformed

    public void load_all_accounts(boolean bShow) {
        System.out.println();
       calAccounts = MyCn.getDbDriver().SQL_getQueryResultSetAsArray(MyCn.getConn(), 
            "SELECT id_eas_calAccount,c_accountOwnerType,c_owner_table," +
            "id_c_owner_table,c_owner_name,c_owner_pozn FROM eas_calAccount",
            false/* no headers */);
        if (bShow) {
            SortedComboBoxModel<String> cbm = new SortedComboBoxModel<>();
            htOwnerObjects.clear(); // mazeme pre istotu
            for (Object[] row : calAccounts) {
                if (!(cbm.getIndexOf(row[1]) > -1)) cbm.addElement(row[1].toString());
                CalendarOwner clObj = new CalendarOwner(row); 
                htOwnerObjects.put(row[4].toString() + " - " + row[5].toString(), clObj);
            }
            jCB_OwnerType.setModel(cbm);
            jCB_OwnerType.setSelectedIndex(0);
        }
        allAccountsLoaded = true;
    }

    public void load_accounts_for(Object accOwner) {
            SortedComboBoxModel<String> cbm = new SortedComboBoxModel<>();
            loadedAccountIDs = "";
            for (Object[] row : calAccounts) {
                 if (row[1].toString().equals(accOwner.toString())) {
                     if (freezedOwner.length() == 0 || freezedOwner.equalsIgnoreCase(row[4].toString()))
                     {
                    cbm.addElement(row[4] + " - " + row[5]);
                    loadedAccountIDs = loadedAccountIDs + "," + row[0].toString();
                     }
                 }
            }
            // odrezanie prvej ciarky, ked treba
            if (loadedAccountIDs.startsWith(","))
               loadedAccountIDs = loadedAccountIDs.substring(1);
            System.out.println("LOADINGFOR:" + accOwner.toString() + "  !!LOADED_ACCOUNTIDS: " + loadedAccountIDs
                               + " FREEZEDFOR:" + freezedOwner);
            jCB_OwnerName.setModel(cbm);
            jCB_OwnerName.setSelectedIndex(0);
    }
     
    public String goToOwner(Object ownerObj) {

        if (!allAccountsLoaded) load_all_accounts(true);
        
        CalendarOwner  clow = (CalendarOwner) ownerObj;
        
 ////       System.out.println("LLocating " + clow.getAccountOwnerType() + " -> " +
 ////               clow.getOwnerName() + " - " +  clow.getOwnerPozn());
        
        jCB_OwnerType.setSelectedItem(clow.getAccountOwnerType());
        jCB_OwnerName.setSelectedItem(clow.getOwnerName() + " - " +  clow.getOwnerPozn());
        return "";
    }
    
    public void setSingleCalendar(boolean bSing) {
        bSingle = bSing;
        jCB_allCalendars.setSelected(!bSing);
        jCB_allCalendars.setVisible(!bSing);
    }
    
    public void setUpdateMode(boolean bOwnerType,boolean bOwnerName, boolean bAllCalendars) {
        jCB_OwnerType.setEnabled(bOwnerType);
        jCB_OwnerName.setEnabled(bOwnerName);
        jCB_allCalendars.setEnabled(bAllCalendars);
    }

    public boolean freezeForOwner(String sOwner) {
     //   pnl_owner_source1.freezeForOwner(sOwner);
        freezedOwner = sOwner;
        bSingle = true;
        jCB_allCalendars.setSelected(false);
        jCB_allCalendars.setVisible(false);
        jCB_OwnerType.setSelectedItem("Uzivatel");
        jCB_OwnerType.setEnabled(false);
        jCB_OwnerName.setEnabled(false);
        return true;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jCB_OwnerName;
    private javax.swing.JComboBox<String> jCB_OwnerType;
    private javax.swing.JCheckBox jCB_allCalendars;
    // End of variables declaration//GEN-END:variables
}
